pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col(pal(20)))
image(volcano, cols(pal(20)))
image(volcano, cols=pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
swirl()
library("swirl")
swirl()
qplot(displ, hwy, data=mpg, geom=(c("points", "smooth")), Facets= .~drv)
qplot(displ, hwy, data=mpg, geom=c("points", "smooth"), Facets= .~drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), Facets= .~drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets= .~drv)
g <- ggplot(mpg, displ, hwy)
ggplot(mpg, displ, hwy)
ggplot(data=mpg, displ, hwy)
ggplot(mpg, aes(displ, hwy)
)
g<-ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
(g+geom_point())+geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth="lm"
g+geom_point()+geom_smooth()="lm"
g+geom_point()+geom_smooth()<-"lm"
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
print(g)
g+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(size=4, alpha=1/2, aes(color=drv))
g+geom_point(aes(color=drv),labs(title="Swirl Rules!"),labs(x="Displacement", y="Hwy Mileage"))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage"))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size=2, alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm", se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_familt="Times")
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx, myy, type="1", ylim=c(-3,3))
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(myx, myy))
g+geom_line()
g+geom_line(ylim(-3,3))
g+geom_line(aes(ylim(-3,3))
)
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg, aes(displ, hwy), color=factor(year))
g<-ggplot(mpg, aes(displ, hwy, color=factor(year))
)
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_amooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
swirl
swirl()
str(diamonds)
hist(diamonds)
qplot(diamonds)
qplot(price,data=diamonds)
range(diamond$price)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, bindwidth=18497/30, fill=cut)
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut())
qplot(price, data=diamonds, geom="density", color=cut
)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom_smooth(method="lm"))
qplot(carat, price, data=diamonds, color=cut, geom_smooth=(method="lm"))
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm") + facets(.~drv)
qplot(carat, price, data=diamonds, color=cut, facets=.~drv) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut, facets=.~cut + geom_smooth(method="lm")
)
qplot(carat, price, data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(data=diamonds$carat, seq(0,1,length=4),na.rm=TRUE )
cutpoints <- quantile(data=diamonds$carat, seq(0,1,length=4),na.rm=TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4),na.rm=TRUE)
cutpoints
cut <- diamonds$car2()
cut <- diamonds$carat, cutpoints
cut
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, printCoefmat()))
g <- ggplot(diamonds, aes(depth, price)
)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut
)
library("swirl")
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
distxy
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
abline(h=0.05, col="green")
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt, col=cm.colors(25))
heatmap(mt)
mt
denmt
plot(denmt)
dist(distmt)
distmt
cmat
points(cx, cy, col=c("red", "orange", "purple"), pch=3)
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x,y,cx,cy)
which.min(distTmp, distTmp, which.min)
apply(distTmp, 2, which.min)
points(x,y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean())
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red", "green"), pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source(filename("addPatt.R"), local=TRUE)
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu * diag * t(matv)
matu x diag x t(matv)
=matu * diag * t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- ((svd1$u[,1] %*% svd1$d[1]) %*% t(svd1$v))
a1 <- (svd1$u[,1] %*% svd1$d[1]) %*% t(svd1$v)
a1 <- (svd1$u[,1] %*% svd1$d[1])
a1 <- (svd1$u[,1] * svd1$d[1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] * svd1$d[2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% svd1$d[2] %*% t(svd1$v[,1:2])
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,"562"])
names(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject=1)
sub1 <- subset(ssd, subject==1)
sub1
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(x[1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
mplclust(hclustering, lab.col=unclass(sub1$activity))
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
mypclust(hclustering, lab.col=unclass(sub1$activity))
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[, -c(562, 563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(362,363)], center=6)
kClust <- kmeans(sub1[,-c(362:363)], center=6)
kClust <- kmeans(sub1, center=6)
kClust <- kmeans(sub1, centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
table(kClust$cluster, sub1$activity)
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch=19, ylab="Walkdown Cluster")
library("swirl")
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit((cnames, '|', fixed=TRUE))
cnames <- strsplit(cnames, '|', fixed=TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0), log10(x1))
x1<0
negative <- x1 <0
sum(negative, na.rm=TRUE)
mean(negative, na.rm=TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "Month")
hist(dates[negative], "month")
str(site0)
both<-intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, (State.Code==36 & county.site == "both"))
cnt0 <- subset(pm0, (State.Code==36 & county.site %in% both))
cnt0 <- subset(pm0, State.Code==36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code==36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code=63 & Site.ID=2008)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID ==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(lwd=2, na.rm=TRUE, h=x0sub)
abline(lwd=2, h=median(x0sub, na.rm=TRUE)
)
plot(dates1, x1sub, pch=20)
abline(lwd=2, h=median(x1sub, na.rm=TRUE))
rng <-range(x0sub, x1sub, na.rm=TUE)
rng <-range(x0sub, x1sub, na.rm=TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean(Sample.Value), na.rm=TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, apply(Sample.Value, mean), na.rm=TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0), mean=mn0)
d1 <- data.frame(state=names(mn1), mean=mn1)
mrg <- merge(d0, d1, "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim=c(.5,2.5)))
with(mrg, plot(rep(2,52), mrg[,3])
)
with(mrg, points(rep(2,52), mrg[,3]))
segments(x,y)
segments(x,y,x,y)
segments(mrg[1,2],y,x,y)
segments(mrg[,2],mrg[,2],mrg[,3],mrg[,3])
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
getwd()
library("kern")
library("kernlab")
library(kernlab)
install.package("kernlab")
install.packages(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[1:5])
setwd("/Users/rebeccalau/Desktop/Desktop/MyProCert_DataScience/Coursera_rprog/course5/week2/courseproject1/RepData_PeerAssessment1/")
getwd()
if(!file.exists("./activity.zip")){
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl, destfile="./activity.zip", method="curl")
unzip(zipfile="./activity.zip", exdir="./")
}
if(!file.exists("activity.csv")){
unzip(zipfile="./activity.zip", exdir="./")
}
data <- read.csv("./activity.csv")
library(ggplot2)
##1. Calculate the total number of steps taken per day
total_steps_day <- with(data, aggregate(x=list(count=data$steps), by = list(date=data$date),na.rm=TRUE, FUN=sum))
total_steps_day
##2. Make a histogram of the total number of steps taken each day
ggplot(data = total_steps_day, aes(total_steps_day$count)) + geom_histogram(binwidth=500) + labs(y = "Frequency", x="Number of Steps", title="Total number of steps taken per day")
hist(total_steps_day$count, main="Histogram for Total Steps Count Per Day",    xlab="Total Steps Count Per Day")
##3. Calculate and report the mean and median of the total number of steps taken per day
mean_total_steps_day <- mean(total_steps_day$count,na.rm=TRUE)
median_total_steps_day <- median(total_steps_day$count,na.rm=TRUE)
##1. Make a time series plot (i.e. 𝚝𝚢𝚙𝚎 = "𝚕") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
average_steps_day <- with(data, aggregate(x=list(avg_steps=data$steps), by = list(interval=data$interval),na.rm=TRUE, FUN=mean))
plot(average_steps_day$interval, average_steps_day$avg_steps, type='l', xlab="5-Minute Interval", ylab="Average Steps Count", main="Time Series Plot")
##2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
average_steps_day[which.max(average_steps_day$avg_steps),1]
##1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
sum(is.na(data$steps))
##2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
#Get index for na data
#NA_index <- which(is.na(data$steps))
#mean_steps_by_day <- with(data, aggregate(x=list(avg_steps=data$steps), by = list(date=data$date),na.rm=TRUE, FUN=mean))
#mean_steps_by_day[ is.na(mean_steps_by_day) ] <- 0
#data_imputed <- d<-data_imputed<-data_imputed[which(is.na(data_imputed$steps)),]
##dadata_imputed[which(is.na(data_imputed$steps)),] <- ta[is.na(data$steps)] =mean(data$steps, na.rm=TRUE)
##3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
NO_NA_data <- data
NA_index <- which(is.na(data$steps))
data_NO_na <- melt(data = data,id.vars="interval", measure.vars="steps", na.rm= TRUE)
interval_data <- dcast(data_NO_na, interval ~ variable, mean)
head(interval_data)
NO_NA_data <- data
NA_index <- which(is.na(data$steps))
data_NO_na <- melt(data = data,id.vars="interval", measure.vars="steps", na.rm= TRUE)
library("reshape2")
data_NO_na <- melt(data = data,id.vars="interval", measure.vars="steps", na.rm= TRUE)
interval_data <- dcast(data_NO_na, interval ~ variable, mean)
head(interval_data)
View(interval_data)
View(data_NO_na)
View(data)
View(interval_data)
test <- NO_NA_data$interval[NA_index]
for (counter in NA_index) {
step_temp <- NO_NA_data$interval[counter]
index <- which(interval_data$interval == step_temp)
NO_NA_data$steps[counter] <- interval_data$steps[index]
}
cat("Test total number of missing values =",sum(is.na(NO_NA_data$steps)))
hist(df_imputed_steps_by_day$steps, main="Histogram of total number of steps per day (imputed)", xlab="Total number of steps in a day")
data_NO_na <- melt(data = NO_NA_data,id.vars="date", measure.vars="steps")
steps_date_2 <- dcast(data_NO_na, date ~ variable, sum)
plot(steps_date_2$date, steps_date_2$steps, type="h", main="Histogram of Daily Steps",xlab="Date", ylab="Steps per Day", col="black", lwd=7)
abline(h=mean(steps_date_2$steps), col="red", lwd=2)
plot(steps_date_2$date, steps_date_2$steps, type="l", main="Histogram of Daily Steps",xlab="Date", ylab="Steps per Day", col="black", lwd=7)
abline(h=mean(steps_date_2$steps), col="red", lwd=2)
plot(steps_date_2$date, steps_date_2$steps, type="h", main="Histogram of Daily Steps",xlab="Date", ylab="Steps per Day", col="black", lwd=1)
plot(steps_date_2$date, steps_date_2$steps, type="h", main="Histogram of Daily Steps",xlab="Date", ylab="Steps per Day", col="black", lwd=1, lty=1)
plot(steps_date_2$date, steps_date_2$steps, type="h", main="Histogram of Daily Steps",xlab="Date", ylab="Steps per Day", col="black", lwd=7)
plot(steps_date_2$date, steps_date_2$steps, type="h", main="Histogram of Daily Steps",xlab="Date", ylab="Steps per Day", col="black", lwd=10)
hist(steps_date_2$steps)
hist(steps_date_2$steps, main="Histogram of total number of steps per day (imputed)",
xlab="Total number of steps in a day")
data_imputed <- data
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
interval_value <- data_imputed$interval[i]
steps_value <- steps_by_interval[
steps_by_interval$interval == interval_value,]
data_imputed$steps[i] <- steps_value$steps
}
}
data_imputed <- data
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
interval_value <- data_imputed$interval[i]
steps_value <- average_steps_day[
average_steps_day$interval == interval_value,]
data_imputed$steps[i] <- steps_value$steps
}
}
data_imputed <- data
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
interval_value <- data_imputed$interval[i]
steps_value <- average_steps_day[
average_steps_day$interval == interval_value,]
data_imputed$steps[i] <- steps_value$steps
}
}
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
interval_value <- data_imputed$interval[i]
steps_value <- average_steps_day[average_steps_day$interval == interval_value,]
data_imputed$steps[i] <- steps_value$steps
}
}
View(average_steps_day)
View(average_steps_day)
newData <- data
for (i in 1:nrow(newData)) {
if (is.na(newData$steps[i])) {
newData$steps[i] <- average_steps_day[which(newData$interval[i] == average_steps_day$interval), ]$avg_steps
}
}
View(newData)
cat("Test total number of missing values =",sum(is.na(newData$steps)))
View(newData)
##2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
newData <- data
for (i in 1:nrow(newData)) {
if (is.na(newData$steps[i])) {
newData$steps[i] <- average_steps_day[which(newData$interval[i] == average_steps_day$interval), ]$avg_steps
}
}
##3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
cat("Test total number of missing values =",sum(is.na(newData$steps)))
##4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
hist(newData$steps, main="Histogram of total number of steps per day (imputed)",
xlab="Total number of steps in a day")
View(NO_NA_data)
View(newData)
sum(is.na(data$steps))
NO_NA_data <- data
NA_index <- which(is.na(data$steps))
data_NO_na <- melt(data = data,id.vars="interval", measure.vars="steps", na.rm= TRUE)
interval_data <- dcast(data_NO_na, interval ~ variable, mean)
newData <- data
for (i in 1:nrow(newData)) {
if (is.na(newData$steps[i])) {
newData$steps[i] <- average_steps_day[which(newData$interval[i] == average_steps_day$interval), ]$avg_steps
}
}
test <- NO_NA_data$interval[NA_index]
for (counter in NA_index) {
step_temp <- NO_NA_data$interval[counter]
index <- which(interval_data$interval == step_temp)
NO_NA_data$steps[counter] <- interval_data$steps[index]
}
cat("NO_NA_data =",sum(is.na(NO_NA_data$steps)))
cat("newData =",sum(is.na(newData$steps)))
ata_NO_na <- melt(data = NO_NA_data,id.vars="date", measure.vars="steps")
steps_date_2 <- dcast(data_NO_na, date ~ variable, sum)
hist(steps_date_2$steps, main="Histogram of total number of steps per day (imputed)",
xlab="Total number of steps in a day")
hist(newData$steps, main="Histogram of total number of steps per day (imputed)", xlab="Total number of steps in a day")
View(steps_date_2)
newTotalSteps <- aggregate(newData$steps, list(Date = newData$date), FUN = "sum")$x
newTotalSteps <- with(newData, aggregate(x=list(ttl_steps=newData$steps), by = list(date=newData$date), FUN=sum))
View(steps_date_2)
View(total_steps_day)
newTotalSteps <- with(newData, aggregate(x=list(ttl_steps=newData$steps), by = list(date=newData$date), FUN=sum))
hist(newTotalSteps$ttl_steps, main="Histogram of total number of steps per day (imputed)",
xlab="Total number of steps in a day")
mean(newTotalSteps$ttl_steps)
median(newTotalSteps$ttl_steps)
mean(total_steps_day$Count,na.rm=TRUE)
setwd("/Users/rebeccalau/Desktop/Desktop/MyProCert_DataScience/Coursera_rprog/course5/week2/courseproject1/RepData_PeerAssessment1/")
getwd()
if(!file.exists("./activity.zip")){
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl, destfile="./activity.zip", method="curl")
unzip(zipfile="./activity.zip", exdir="./")
}
if(!file.exists("activity.csv")){
unzip(zipfile="./activity.zip", exdir="./")
}
data <- read.csv("./activity.csv")
library(ggplot2)
library("reshape2")
total_steps_day <- with(data, aggregate(x=list(count=data$steps), by = list(date=data$date),na.rm=TRUE, FUN=sum))
total_steps_day
gplot(data = total_steps_day, aes(total_steps_day$count)) + geom_histogram(binwidth=500) + labs(y = "Frequency", x="Number of Steps", title="Total number of steps taken per day")
hist(total_steps_day$count, main="Histogram for Total Steps Count Per Day",    xlab="Total Steps Count Per Day")
##3. Calculate and report the mean and median of the total number of steps taken per day
mean_total_steps_day <- mean(total_steps_day$count,na.rm=TRUE)
median_total_steps_day <- median(total_steps_day$count,na.rm=TRUE)
